given 

BoxPlot2(formula=peak ~ drug, data=peaks1_long, wid=wid, cap=cap, xlab='', ylab = ylab, xrange=xrange, yrange=yrange, tick_length=tick_length, 
  y_tick_interval=y_tick_interval, lwd=lwd, type=type, amount=amount, p.cex=p.cex, filename='A1.svg', 
  height=height, width=width, na.rm=TRUE, save=plotsave)

where BoxPlot2

function(formula, data, wid = 0.2, cap = 0.05, xlab = '', ylab = 'PSC amplitude (pA)', 
                    main = '', xrange = NULL, yrange = c(-400, 0), tick_length = 0.2, 
                    x_tick_interval = NULL, y_tick_interval = 100, lwd = 1, 
                    type = 6, amount = 0.05, p.cex = 0.5, filename = 'boxplot.svg', 
                    height = 2.5, width = 4, bg = 'transparent', alpha = 0.6, na.rm=FALSE, save = FALSE) {
  
  # Parse the formula to extract response and predictors
  response <- as.character(formula[[2]])
  predictors <- all.vars(formula[[3]]) # Get the predictor variables
  
  # Check if the specified columns exist in the data
  if (!all(c(response, predictors) %in% colnames(data))) {
    stop("The specified response or predictor variables are not found in the data.")
  }
  
  # Handle grouping if interaction is specified or random effects are included
  if (any(grepl("\\|", predictors))) {
    # Mixed effects formula with random effects
    fixed_effects <- sub(" \\+ \\(1\\|.*\\)", "", predictors)
    group_vars <- strsplit(fixed_effects, " \\* | \\+ ")[[1]]
    subject_var <- gsub(".*\\|", "", predictors)
    data$s <- as.factor(data[[subject_var]])
  } else {
    # Standard formula without random effects
    group_vars <- predictors
  }
  
  # Determine the number of grouping factors
  if (length(group_vars) == 1) {
    # Single grouping variable
    data$x <- as.factor(data[[group_vars[1]]])
  } else {
    # Interaction of two grouping variables
    data$x <- interaction(data[[group_vars[1]]], data[[group_vars[2]]], sep = " : ")
  }
  
  # Set the response variable
  data$y <- data[[response]]

  # Set x range based on the unique levels of x
  if (is.null(xrange)) {
    xrange <- range(as.numeric(data$x)) + c(-wid, wid)
  }
  
  # Handle saving the plot
  if (save) {
    svg(file = filename, width = width, height = height, bg = bg)
  } else {
    dev.new(width = width, height = height, noRStudioGD = TRUE)
  }
  
  # Create the box plot using the WBplot function
  WBplot(data = data, wid = wid, cap = cap, xlab = xlab, ylab = ylab, main = main, 
         xrange = xrange, yrange = yrange, tick_length = tick_length, x_tick_interval = x_tick_interval, 
         y_tick_interval = y_tick_interval, lwd = lwd, type = type, na.rm=na.rm)
  
  # Jitter x-values for plotting individual points
  set.seed(42)
  data$x_jitter <- jitter(as.numeric(data$x), amount = amount)
  
  # Set the color with alpha transparency for the points
  point_color <- rgb(169 / 255, 169 / 255, 169 / 255, alpha = alpha)  # darkgray with alpha transparency
  points(data$x_jitter, data$y, pch = 19, col = point_color, lwd = lwd / 3, cex = p.cex)
  
  # Connect data points for repeated measures (if subject information is provided)
  if ("s" %in% colnames(data)) {
    subjects <- unique(data$s)
    for (subj in subjects) {
      subset_data <- data[data$s == subj, ]
      lines(subset_data$x_jitter, subset_data$y, col = 'darkgray', lwd = lwd, lty = 3)  # lty=3 for dotted line
    }
  }
  
  # Close the SVG device if saving
  if (save) {
    dev.off()
  }
}

plots the box plot for data: peaks1_long
   s drug       peak
1  1    1  -36.65360
2  2    1 -124.18812
3  3    1  -57.92655
4  4    1  -45.63984
5  5    1  -27.64172
6  6    1  -80.68462
7  7    1  -38.47355
8  1    2  -25.97561
9  2    2  -75.76428
10 3    2  -24.10201
11 4    2  -32.81785
12 5    2  -22.33632
13 6    2  -41.78965
14 7    2  -32.23963
15 1    3  -16.47457
16 2    3  -11.01676
17 3    3  -10.35019
18 4    3  -15.11886
19 5    3  -19.80117
20 6    3  -30.62653
21 7    3  -11.67174

and 
test <- sequential_wilcox(peaks1_long,  'drug', 'peak', group_names=group_names1, paired=TRUE)
test
#   parameter        contrast                            test alternative test.stat stat  p value p adjusted
# 1      peak     ctrl vs CBX Wilcoxon signed rank exact test   two.sided         V    0 0.015625    0.03125
# 2      peak CBX vs GABAzine Wilcoxon signed rank exact test   two.sided         V    0 0.015625    0.03125

I want a new fuction that will draw significant lines as per usual journal style IF significant


group_names = NULL,   # e.g., c("ctrl", "CBX", "GABAzine")
sig_offset = NULL,    # vertical offset above box for the line
sig_line_width = 1,   # line width for the significance line
sig_text_cex = 1,     # cex for the significance text

BoxPlot2_with_sig <- function(fformula, data, wid = 0.2, cap = 0.05, xlab = '', ylab = 'PSC amplitude (pA)', 
                    main = '', xrange = NULL, yrange = c(-400, 0), tick_length = 0.2, 
                    x_tick_interval = NULL, y_tick_interval = 100, lwd = 1, 
                    type = 6, amount = 0.05, p.cex = 0.5, filename = 'boxplot.svg', 
                    height = 2.5, width = 4, bg = 'transparent', alpha = 0.6, na.rm=FALSE, save = FALSE
                    alpha = 0.05, 
                    group_names = NULL,   # e.g., c("ctrl", "CBX", "GABAzine")
                    sig_offset = NULL,    # vertical offset above box for the line
                    sig_line_width = 1,   # line width for the significance line
                    sig_text_cex = 1,     # cex for the significance text
                    ) {
  # First, draw the boxplot using your existing function
  BoxPlot2(formula = formula, data = data, ...)
  
  # Determine the grouping variable(s) from the formula
  predictors <- all.vars(formula[[3]])
  
  # Use the grouping already defined in BoxPlot2 (stored as data$x)
  # Get the factor levels for x. (If group_names are provided, use that order.)
  if (!is.null(group_names)) {
    groups <- group_names
  } else {
    groups <- levels(as.factor(data[[predictors[1]]]))
  }
  
  # The x positions of the boxes will be simply 1, 2, â€¦, length(groups)
  x_positions <- setNames(seq_along(groups), groups)
  
  # Loop over each row of the significance test results
  for (i in 1:nrow(test_results)) {
    # Extract the (adjusted) p-value. Adjust column name as needed.
    p_val <- as.numeric(test_results[i, "p adjusted"])
    
    if (p_val < alpha) {
      # Parse the contrast string; assume it is of the form "GroupA vs GroupB"
      contrast_str <- as.character(test_results[i, "contrast"])
      groups_in_contrast <- strsplit(contrast_str, " vs ")[[1]]
      if (length(groups_in_contrast) != 2) next
      
      group1 <- groups_in_contrast[1]
      group2 <- groups_in_contrast[2]
      
      # Get the x positions for the two groups (if they match the groups order)
      if (!(group1 %in% names(x_positions)) || !(group2 %in% names(x_positions))) {
        warning(paste("One of the groups in contrast", contrast_str, "was not found."))
        next
      }
      x1 <- x_positions[group1]
      x2 <- x_positions[group2]
      
      # Find the maximum y value (top of the box) for these two groups.
      # Note: data$x in BoxPlot2 was created as a factor from the grouping variable.
      y_vals_group1 <- data$y[as.character(data$x) == group1]
      y_vals_group2 <- data$y[as.character(data$x) == group2]
      y_max <- max(c(y_vals_group1, y_vals_group2), na.rm = TRUE)
      
      # Determine vertical offset for drawing the significance line.
      # If sig_offset is not provided, set it to 5% of the total y-range.
      if (is.null(sig_offset)) {
        y_range <- diff(range(data$y, na.rm = TRUE))
        offset <- 0.05 * y_range
      } else {
        offset <- sig_offset
      }
      y_line <- y_max + offset
      
      # Draw the horizontal line connecting the two boxes
      segments(x0 = x1, y0 = y_line, x1 = x2, y1 = y_line, lwd = sig_line_width)
      
      # Draw short vertical ticks at both ends of the horizontal line
      tick_height <- offset * 0.5
      segments(x0 = x1, y0 = y_line, x1 = x1, y1 = y_line - tick_height, lwd = sig_line_width)
      segments(x0 = x2, y0 = y_line, x1 = x2, y1 = y_line - tick_height, lwd = sig_line_width)
      
      # Determine the significance label based on the adjusted p-value.
      star_label <- if (p_val < 0.001) {
        "***"
      } else if (p_val < 0.01) {
        "**"
      } else if (p_val < 0.05) {
        "*"
      } else {
        "n.s."
      }
      
      # Place the significance marker above the horizontal line
      text(x = (x1 + x2) / 2, y = y_line + tick_height, labels = star_label, cex = sig_text_cex)
    }
  }
}


